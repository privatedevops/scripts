server {
    listen *:443 ssl http2;

    server_name {{ DOMAIN }} www.{{ DOMAIN }} media.{{ DOMAIN }} cdn.{{ DOMAIN }} static.{{ DOMAIN }};

    set $MAGE_ROOT {{ HOME_FOLDER }}/web/{{ DOMAIN }}/public_html;
    root $MAGE_ROOT/pub;

    access_log {{ HOME_FOLDER }}/web/{{ DOMAIN }}/logs/ssl-{{ DOMAIN }}-access.log;
    error_log {{ HOME_FOLDER }}/web/{{ DOMAIN }}/logs/ssl-{{ DOMAIN }}-error.log;

	index index.php;
	autoindex off;
	charset UTF-8;
	error_page 404 403 = /errors/404.php;

	ssl_certificate /etc/nginx/ssl/{{  DOMAIN }}.pem;
	ssl_certificate_key /etc/nginx/ssl/{{  DOMAIN }}.key;

	# Deny access to sensitive files
	location /.user.ini {
	    deny all;
	}

	# PHP entry point for setup application
	location ~* ^/setup($|/) {
	    root $MAGE_ROOT;
	    location ~ ^/setup/index.php {
	        fastcgi_pass fastcgi_backend;

	        fastcgi_param PHP_FLAG "session.auto_start=off";
	        fastcgi_param PHP_FLAG "suhosin.session.cryptua=off";
	        fastcgi_param PHP_VALUE "memory_limit=2048M";
	        fastcgi_param PHP_VALUE "max_execution_time=1200";
	        fastcgi_read_timeout 600s;
	        fastcgi_connect_timeout 600s;

	        fastcgi_index index.php;
	        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	        include fastcgi_params;
	    }

	    location ~ ^/setup/(?!pub/). {
	        deny all;
	    }

	    location ~ ^/setup/pub/ {
	    	add_header 'Access-Control-Allow-Origin' '*' 'always';
	    }
	}

	# PHP entry point for update application
	location ~* ^/update($|/) {
	    root $MAGE_ROOT;

	    location ~ ^/update/index.php {
	        fastcgi_split_path_info ^(/update/index.php)(/.+)$;
	        fastcgi_pass fastcgi_backend;
	        fastcgi_index index.php;
	        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	        fastcgi_param PATH_INFO $fastcgi_path_info;
	        include fastcgi_params;
	    }

	    # Deny everything but index.php
	    location ~ ^/update/(?!pub/). {
	        deny all;
	    }

	    location ~ ^/update/pub/ {
	    	add_header 'Access-Control-Allow-Origin' '*' 'always';
	    }
	}

    location / {
		#to run fpm/nginx
		#try_files $uri $uri/ /index.php$is_args$args;

		# Set cache headers
		add_header Cache-Control "max-age=604800, public";
		add_header 'Access-Control-Allow-Origin' '*' 'always';

		# Add custom header to mark the backend (optional)
		add_header BACKEND VC;

		# Proxy pass to Varnish running on port 6081
		proxy_pass http://127.0.0.1:6081;

		# Indicate SSL is offloaded (useful if Varnish is handling SSL offloading)
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		
		# Add this header to indicate SSL has been offloaded
		add_header Ssl-Offloaded "1";
		
		# Additional proxy settings for Varnish (if needed)
		proxy_connect_timeout 60s;
		proxy_send_timeout 60s;
		proxy_read_timeout 60s;
		proxy_buffer_size 128k;
		proxy_buffers 8 128k;
		proxy_busy_buffers_size 256k;
     }

	location /pub/ {
	    location ~ ^/pub/media/(downloadable|customer|import|theme_customization/.*\.xml) {
	        deny all;
	    }
	    alias $MAGE_ROOT/pub/;
		add_header 'Access-Control-Allow-Origin' '*' 'always';
	}

	location /static/ {
	    add_header 'Access-Control-Allow-Origin' '*' 'always';
	    add_header 'Access-Control-Allow-Headers' 'x-requested-with' 'always';
	    add_header 'Access-Control-Max-Age' 86400 'always';
	    add_header 'Content-Length' 0 'always';
	    expires max;

	    location ~ ^/static/version {
	        rewrite ^/static/(version[^/]+/)?(.*)$ /static/$2 last;
	    }

	    location ~* \.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|json|webp|html)$ {
	        add_header Cache-Control "public";
	        expires +1y;
	        if (!-f $request_filename) {
	            rewrite ^/static/?(.*)$ /static.php?resource=$1 last;
	        }
	    }
	    location ~* \.(zip|gz|gzip|bz2|csv|xml)$ {
	        add_header Cache-Control "no-store";
	        expires off;
	        if (!-f $request_filename) {
	           rewrite ^/static/?(.*)$ /static.php?resource=$1 last;
	        }
	    }
	    if (!-f $request_filename) {
	        rewrite ^/static/?(.*)$ /static.php?resource=$1 last;
	    }
		add_header 'Access-Control-Allow-Origin' '*' 'always';
	}

	location /media/ {
	    try_files $uri $uri/ /get.php$is_args$args;

	    location ~ ^/media/theme_customization/.*\.xml {
	        deny all;
	    }

	    location ~* \.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|webp)$ {
	        add_header Cache-Control "public";
	        expires +1y;
	        try_files $uri $uri/ /get.php$is_args$args;
	    }
	    location ~* \.(zip|gz|gzip|bz2|csv|xml)$ {
	        add_header Cache-Control "no-store";
	        expires off;
	        try_files $uri $uri/ /get.php$is_args$args;
	    }
		add_header 'Access-Control-Allow-Origin' '*' 'always';
	}

	location /media/customer/ {
	    deny all;
	}

	location /media/downloadable/ {
	    deny all;
	}

	location /media/import/ {
	    deny all;
	}

	# PHP entry point for main application
	location ~ ^/(index|get|static|errors/report|errors/404|errors/503|health_check|UpdateSupplier)\.php$ {
	    try_files $uri =404;
	    fastcgi_pass fastcgi_backend;
	    fastcgi_buffers 1024 4k;

	    fastcgi_param PHP_FLAG "session.auto_start=off";
	    fastcgi_param PHP_FLAG "suhosin.session.cryptua=off";
	    fastcgi_param PHP_VALUE "memory_limit=2048M";
	    fastcgi_param PHP_VALUE "max_execution_time=18000";
	    fastcgi_read_timeout 600s;
	    fastcgi_connect_timeout 600s;

		set $redirect 0;
	 	if ( $local_allow = 1 ) {
			set $redirect 1;
			add_header 301 ok;
		}
		if ( $redirect = 1 ) {
			rewrite ^ https://{{ DOMAIN }}$uri permanent;
		}
		fastcgi_param HTTPS on;

	    fastcgi_param MAGE_RUN_TYPE website;
	    fastcgi_param MAGE_RUN_CODE base;

	    fastcgi_index index.php;
	    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	    include fastcgi_params;
	}

	# Banned locations (only reached if the earlier PHP entry point regexes don't match)
	location ~* (\.php$|\.htaccess$|\.git) {
	    deny all;
	}
}
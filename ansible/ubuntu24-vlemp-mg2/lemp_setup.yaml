#!/bin/bash
#
#       Private Devops LTD. - https://privatedevops.com
#
#	ex. ansible-playbook lemp_setup.yaml -i "188.245.171.214," -u root


---
- hosts: 1.1.1.1
  become: yes
  gather_facts: yes
  environment:
    ANSIBLE_STDOUT_CALLBACK: debug

  vars:
    MAINIP: 1.1.1.1
    DOMAIN: domain.com
    USERNAME: ubuntu
    HOME_FOLDER: "/home/{{ USERNAME }}" 

    REDIS_PASS: sdadsafasdadsdsa

    # MySQL Vars
    MYSQL_ROOT_PASS: afsadadssadsadasdasds
    mysql_db_name: db1_{{ USERNAME }}
    mysql_db_user: usr1_{{ USERNAME }}
    mysql_db_password: Jfn1aFEfg125GFGFad

    # MY.CNF Vars
    max_connections: 600
    innodb_buffer_pool_size: '2G'
    innodb_log_file_size: '256M'
    innodb_log_buffer_size: '16M'
    key_buffer_size: '64M'
    max_allowed_packet: '64M'
    open_files_limit: 100000



    SSH_PORT: 22443

    SWAP_PATH: /.swapfile1
    SWAP_SPACE: 2G  

    FPM_POOL_TCP: 9074
    PHP_VERSION: php7.4
    PHP_EXTENSIONS:
      - imap
      - redis
      - amqp
      - cli
      - mysql
      - zip
      - gmp
      - fpm
      - pgsql
      - soap
      - intl
      - mbstring
      - xml
      - gd
      - curl
      - bcmath
      - msgpack
      - readline
      - common

 
  tasks:
    - name: Check swap space
      shell: "free -m | grep Swap | awk '{ print $2 }'"
      register: swap_size
      changed_when: false
      ignore_errors: yes

    - name: Create 2GB swap if not present
      shell: "fallocate -l {{ SWAP_SPACE }} {{ SWAP_PATH }} && chmod 600 {{ SWAP_PATH }} && mkswap {{ SWAP_PATH }} && swapon {{ SWAP_PATH }}"
      when: swap_size.stdout == "0"

    - name: Add swap entry to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "{{ SWAP_PATH }} swap swap defaults 0 0"
      when: swap_size.stdout == "0"

    # Truncate the existing sysctl configuration file
    - name: Truncate sysctl configuration file
      copy:
        content: ""
        dest: /etc/sysctl.conf
      become: yes

    - name: Set sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop:
        - { name: "net.ipv4.tcp_tw_reuse", value: "1" }
        - { name: "net.core.somaxconn", value: "2048" }
        - { name: "net.ipv6.conf.all.disable_ipv6", value: "1" }
        - { name: "net.ipv6.conf.default.disable_ipv6", value: "1" }
        - { name: "net.ipv6.conf.lo.disable_ipv6", value: "1" }
        - { name: "vm.min_free_kbytes", value: "327680" }
        - { name: "vm.vfs_cache_pressure", value: "125" }
        - { name: "vm.dirty_ratio", value: "10" }
        - { name: "vm.dirty_background_ratio", value: "10" }
        - { name: "vm.overcommit_memory", value: "1" }
        - { name: "vm.swappiness", value: "10" }
        - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
        - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
        - { name: "net.ipv4.tcp_syncookies", value: "1" }
        - { name: "net.ipv4.conf.all.log_martians", value: "1" }
        - { name: "net.ipv4.conf.default.log_martians", value: "1" }
        - { name: "net.ipv4.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv4.conf.default.accept_source_route", value: "0" }
        - { name: "net.ipv4.conf.all.rp_filter", value: "1" }
        - { name: "net.ipv4.conf.default.rp_filter", value: "1" }
        - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.secure_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.secure_redirects", value: "0" }
        - { name: "net.ipv4.ip_forward", value: "1" }
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.send_redirects", value: "0" }
        - { name: "kernel.randomize_va_space", value: "1" }
        - { name: "net.ipv4.ip_local_port_range", value: "1024 65000" }
        - { name: "net.ipv4.tcp_rmem", value: "4096 87380 8388608" }
        - { name: "net.ipv4.tcp_wmem", value: "4096 87380 8388608" }
        - { name: "net.core.rmem_max", value: "8388608" }
        - { name: "net.core.wmem_max", value: "8388608" }
        - { name: "net.core.netdev_max_backlog", value: "5000" }
        - { name: "net.ipv4.tcp_window_scaling", value: "1" }

    - name: Reload sysctl
      command: "sysctl -p"
      become: yes

    - name: Create {{ USERNAME }} user
      user:
        name: "{{ USERNAME }}"
        shell: /bin/bash
        home: "{{ HOME_FOLDER }}"
      become: yes
      # Create the user

    - name: Create home folder for {{ USERNAME }}
      file:
        path: "{{ HOME_FOLDER }}"
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"
        mode: '0755'
      become: yes
      # Ensure the home folder is created

    - name: Create web folder
      file:
        path: "{{ HOME_FOLDER }}/web/{{ DOMAIN }}"
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"
        mode: '0755'
      become: yes

    - name: Create logs folder
      file:
        path: "{{ HOME_FOLDER }}/web/{{ DOMAIN }}/logs"
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"
        mode: '0755'
      become: yes
      # Create the logs folder

    - name: Create public_html folder
      file:
        path: "{{ HOME_FOLDER }}/web/{{ DOMAIN }}/public_html"
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"
        mode: '0755'
      become: yes
      # Create the public_html folder

    - name: Update package cache
      apt:
        update_cache: yes
      become: yes

    - name: Install python3-mysqldb package
      apt:
        name: python3-mysqldb
        state: present
      become: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present
      become: yes
      
    - name: Install the ppa:ondrej/php repo
      apt_repository:
        repo: ppa:ondrej/php
        state: present
        update_cache: yes

    - name: Update package cache (before installing PHP extensions)
      apt:
        update_cache: yes
      become: yes

    - name: Install PHP and PHP-FPM extensions
      apt:
        name: "{{ PHP_VERSION }}-{{ item }}"
        state: present
      become: yes
      with_items: "{{ PHP_EXTENSIONS }}"

    - name: Modify PHP settings
      command: >
        sed -i -e '/^[^;]*upload_max_filesize/ s/^\s*upload_max_filesize\s*=.*/upload_max_filesize = 256M/' \
              -e '/^[^;]*post_max_size/ s/^\s*post_max_size\s*=.*/post_max_size = 256M/' \
              -e '/^[^;]*memory_limit/ s/^\s*memory_limit\s*=.*/memory_limit = 512M/' \
              -e '/^[^;]*max_input_vars/ s/^\s*max_input_vars\s*=.*/max_input_vars = 16000/' \
              -e '/^[^;]*max_input_time/ s/^\s*max_input_time\s*=.*/max_input_time = 600/' \
              -e '/^[^;]*max_execution_time/ s/^\s*max_execution_time\s*=.*/max_execution_time = 600/' \
              /etc/php/{{ PHP_VERSION | regex_replace('^php', '') }}/fpm/php.ini
      become: yes
      changed_when: false

    - name: Install MySQL 8
      apt:
        name: mysql-server
        state: present
      become: yes

    - name: Deploy MySQL configuration
      template:
        src: my.cnf.j2
        dest: /etc/mysql/mysql.conf.d/mysqld.cnf
        owner: mysql
        group: mysql
        mode: '0644'

    - name: Wait for MySQL to start
      wait_for:
        host: localhost
        port: 3306
        state: started
      become: yes

    - name: Create /root/.my.cnf file
      copy:
        content: |
          [client]
          user=root
          password={{ MYSQL_ROOT_PASS }}
        dest: /root/.my.cnf
        mode: '0600'
      become: yes

    - name: Create MySQL database
      command: |
        mysql -u root -p{{ MYSQL_ROOT_PASS }} -e "CREATE DATABASE IF NOT EXISTS {{ mysql_db_name }};"
      register: create_db
      changed_when: create_db.stdout.find('exists') == -1
      failed_when: create_db.rc != 0
      ignore_errors: yes

    - name: Create MySQL user
      command: |
        mysql -u root -p{{ MYSQL_ROOT_PASS }} -e "CREATE USER '{{ mysql_db_user }}'@'localhost' IDENTIFIED BY '{{ mysql_db_password }}';"
      register: create_user
      changed_when: create_user.stdout.find('already exists') == -1
      failed_when: create_user.rc != 0
      ignore_errors: yes

    - name: Grant all privileges to MySQL user
      command: |
        mysql -u root -p{{ MYSQL_ROOT_PASS }} -e "GRANT ALL PRIVILEGES ON {{ mysql_db_name }}.* TO '{{ mysql_db_user }}'@'localhost';"
      register: grant_privileges
      changed_when: grant_privileges.stdout.find('Query OK') != -1
      failed_when: grant_privileges.rc != 0
      ignore_errors: yes


    - name: Enable UFW
      ufw:
        policy: allow
      become: yes

    - name: Configure PHP-FPM pool
      template:
        src: fpm-pool.j2
        dest: /etc/php/{{ PHP_VERSION | regex_replace('^php', '') }}/fpm/pool.d/{{ USERNAME }}.conf
      vars:
        pool_tcp: "{{ FPM_POOL_TCP }}"
      become: yes

    - name: Configure Nginx http vhost
      template:
        src: nginx-vhost.j2
        dest: /etc/nginx/sites-available/{{ DOMAIN }}
      vars:
        pool_tcp: "{{ FPM_POOL_TCP }}"
      become: yes

    - name: Enable Nginx http vhost with symlink
      file:
        src: /etc/nginx/sites-available/{{ DOMAIN }}
        dest: /etc/nginx/sites-enabled/{{ DOMAIN }}
        state: link
      become: yes

    - name: Configure Nginx FPM upstream.conf
      template:
        src: fpm-upstream.conf.j2
        dest: /etc/nginx/conf.d/fpm-upstream.conf
      vars:
        pool_tcp: "{{ FPM_POOL_TCP }}"
      become: yes

    # Create /etc/nginx/ssl folder if it doesn't exist
    - name: Create /etc/nginx/ssl directory
      file:
        path: /etc/nginx/ssl
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: yes

    # Generate self-signed SSL certificate and private key
    - name: Generate SSL certificate and key using openssl
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/nginx/ssl/{{ DOMAIN }}.key \
        -out /etc/nginx/ssl/{{ DOMAIN }}.pem \
        -subj "/C=US/ST=State/L=City/O=Company Name/OU=Org/CN={{ DOMAIN }}"
      args:
        creates: "/etc/nginx/ssl/{{ DOMAIN }}.pem"
      become: yes

    - name: Configure Nginx https - SSL vhost
      template:
        src: nginx-ssl-vhost.j2
        dest: /etc/nginx/sites-available/ssl-{{ DOMAIN }}
      vars:
        pool_tcp: "{{ FPM_POOL_TCP }}"
      become: yes

    - name: Enable Nginx SSL self-signed vhost with symlink
      file:
        src: /etc/nginx/sites-available/ssl-{{ DOMAIN }}
        dest: /etc/nginx/sites-enabled/ssl-{{ DOMAIN }}
        state: link
      become: yes

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded
      become: yes

    - name: Restart PHP-FPM
      service:
        name: "{{ PHP_VERSION }}-fpm"
        state: restarted
      become: yes

    - name: Print MySQL info
      debug:
        msg: |
          MySQL Info:
          - Root Password: {{ MYSQL_ROOT_PASS }}
      become: yes

    - name: Print Nginx vhost info
      debug:
        msg: "{{ DOMAIN }} Vhost Document Root: {{ HOME_FOLDER }}/web/{{ DOMAIN }}/public_html"

    - name: Print PHP-FPM pool info
      debug:
        msg: "PHP-FPM Pool Name: {{ USERNAME }}-fpm.conf"

    - name: Ensure PHP and required dependencies are installed
      apt:
        name:
          - php
          - php-cli
          - php-mbstring
          - unzip
          - curl
        state: present
        update_cache: yes

    - name: Download Composer installer
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-setup.php
        mode: '0755'

    - name: Install Composer
      command: >
        php /tmp/composer-setup.php --install-dir=/usr/local/sbin --filename=composer
      args:
        creates: /usr/local/sbin/composer

    - name: Verify Composer installation
      command: /usr/local/sbin/composer --version --no-interaction
      register: composer_version

    - name: Install Certbot
      apt:
        name: certbot
        state: present

    - name: Install Certbot Nginx Plugin
      apt:
        name: python3-certbot-nginx
        state: present

    - name: Obtain SSL Certificate
      command: >
        certbot --nginx -n --agree-tos --email your_email@example.com
        -d {{ DOMAIN }} -d www.{{ DOMAIN }}
      when: ansible_facts['os_family'] == 'Debian'
      ignore_errors: yes

    - name: Add cron job to renew SSL certificate
      cron:
        name: "Renew SSL certificates"
        user: root
        job: "/usr/bin/certbot renew --quiet --no-self-upgrade"
        minute: "0"
        hour: "3"

    - name: Add Elasticsearch GPG key
      apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present

    - name: Add Elasticsearch APT repository
      apt_repository:
        repo: 'deb https://artifacts.elastic.co/packages/7.x/apt stable main'
        state: present
        update_cache: yes

    - name: Install Elasticsearch 7
      apt:
        name: elasticsearch
        state: present

    - name: Set Elasticsearch to listen on 127.0.0.1 and disable security
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: '^#?network.host:'
        line: 'network.host: 127.0.0.1'

    - name: Install Redis
      apt:
        name: redis-server
        state: present

    - name: Configure Redis to listen on 127.0.0.1
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^#?bind '
        line: 'bind 127.0.0.1'

    - name: Set Redis password
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^#?requirepass '
        line: 'requirepass {{ REDIS_PASS }}'

    - name: Restart Redis service
      systemd:
        name: redis-server
        state: restarted

    - name: Install Varnish
      apt:
        name: varnish
        state: present

    - name: Deploy Varnish default.vcl template
      template:
        src: varnish_default.vcl.j2
        dest: /etc/varnish/default.vcl
        owner: root
        group: root
        mode: '0644'
      vars:
        backend_ip: "{{ MAINIP }}"
      notify: Restart Varnish

    - name: Update Varnish systemctl script
      lineinfile:
        path: /etc/systemd/system/multi-user.target.wants/varnish.service
        regexp: '^ExecStart=.*'
        line: 'ExecStart=/usr/sbin/varnishd -a :6081 -T localhost:6082 -f /etc/varnish/default.vcl -s malloc,2048M -p thread_pools=4 -p thread_pool_min=200 -p thread_pool_max=2000 -p thread_pool_timeout=300 -p listen_depth=64 -p lru_interval=20 -p connect_timeout=600 -j unix,user=vcache -F -S /etc/varnish/secret'

    - name: Remove extra lines between ExecStart and ExecReload
      shell: |
        sed -i '/^ExecStart/,/^ExecReload/!b;//!d' /etc/systemd/system/multi-user.target.wants/varnish.service

    - name: Reload systemd daemon
      command: systemctl daemon-reload
      become: yes

    - name: Restart Varnish service
      service:
        name: varnish
        state: restarted
      become: yes


    - name: Check if SSH port 22 is present in /etc/ssh/sshd_config (including commented line)
      shell: "grep '^#Port 22\\|^Port 22' /etc/ssh/sshd_config"
      register: ssh_port_22
      changed_when: false
      ignore_errors: yes

    - name: Update SSH port to {{ SSH_PORT }} if port 22 is found (commented or uncommented)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?Port 22'
        line: 'Port {{ SSH_PORT }}'
        state: present
      when: ssh_port_22.rc == 0

    - name: Add Port {{ SSH_PORT }} to sshd_config if no port is defined
      lineinfile:
        path: /etc/ssh/sshd_config
        line: 'Port {{ SSH_PORT }}'
        insertafter: EOF
        state: present
      when: ssh_port_22.rc != 0

    # Step 4: Check if UFW is active
    - name: Check if UFW is active
      shell: "ufw status | grep -i 'active'"
      register: ufw_status
      changed_when: false
      ignore_errors: yes

    # Step 5: If UFW is active, allow 0.0.0.0 access to port 22443
    - name: Allow 0.0.0.0 access to port {{ SSH_PORT }} if UFW is active
      ufw:
        rule: allow
        port: '{{ SSH_PORT }}'
        proto: tcp
        from_ip: '0.0.0.0/0'
      when: ufw_status.rc == 0

    # Step 6: Restart SSH service to apply changes
    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    # Print system information and save it to file
    - name: Print system information to console
      block:
        - name: Print system information
          debug:
              msg:
              - "========================================================="
              - "                    System Configuration                "
              - "========================================================="
              - "MAINIP                : {{ MAINIP }}"
              - "DOMAIN                : {{ DOMAIN }}"
              - "USERNAME              : {{ USERNAME }}"
              - "HOME FOLDER           : {{ HOME_FOLDER }}"
              - ""
              - "========================================================="
              - "                    Database Credentials                 "
              - "========================================================="
              - "MySQL Root Password   : {{ MYSQL_ROOT_PASS }}"
              - "MySQL Database Name   : {{ mysql_db_name }}"
              - "MySQL Database User   : {{ mysql_db_user }}"
              - "MySQL User Password   : {{ mysql_db_password }}"
              - ""
              - "========================================================="
              - "                    MySQL Configuration                  "
              - "========================================================="
              - "Max Connections       : {{ max_connections }}"
              - "InnoDB Buffer Pool    : {{ innodb_buffer_pool_size }}"
              - "InnoDB Log File Size  : {{ innodb_log_file_size }}"
              - "InnoDB Log Buffer Size: {{ innodb_log_buffer_size }}"
              - "Key Buffer Size       : {{ key_buffer_size }}"
              - "Max Allowed Packet    : {{ max_allowed_packet }}"
              - "Open Files Limit      : {{ open_files_limit }}"
              - ""
              - "========================================================="
              - "                    System & PHP Settings                "
              - "========================================================="
              - "SSH Port              : {{ SSH_PORT }}"
              - "Swap Path             : {{ SWAP_PATH }}"
              - "Swap Space            : {{ SWAP_SPACE }}"
              - "FPM Pool TCP          : {{ FPM_POOL_TCP }}"
              - "PHP Version           : {{ PHP_VERSION }}"
              - ""
              - "========================================================="
              - "                    Redis Settings                       "
              - "========================================================="
              - "Redis Password        : {{ REDIS_PASS }}"

        - name: Save system information to file
          ansible.builtin.copy:
            content: |
              =========================================================
                                  System Configuration
              =========================================================
              MAINIP                : {{ MAINIP }}
              DOMAIN                : {{ DOMAIN }}
              USERNAME              : {{ USERNAME }}
              HOME FOLDER           : {{ HOME_FOLDER }}

              =========================================================
                                  Database Credentials
              =========================================================
              MySQL Root Password   : {{ MYSQL_ROOT_PASS }}
              MySQL Database Name   : {{ mysql_db_name }}
              MySQL Database User   : {{ mysql_db_user }}
              MySQL User Password   : {{ mysql_db_password }}

              =========================================================
                                  MySQL Configuration
              =========================================================
              Max Connections       : {{ max_connections }}
              InnoDB Buffer Pool    : {{ innodb_buffer_pool_size }}
              InnoDB Log File Size  : {{ innodb_log_file_size }}
              InnoDB Log Buffer Size: {{ innodb_log_buffer_size }}
              Key Buffer Size       : {{ key_buffer_size }}
              Max Allowed Packet    : {{ max_allowed_packet }}
              Open Files Limit      : {{ open_files_limit }}

              =========================================================
                                  System & PHP Settings
              =========================================================
              SSH Port              : {{ SSH_PORT }}
              Swap Path             : {{ SWAP_PATH }}
              Swap Space            : {{ SWAP_SPACE }}
              FPM Pool TCP          : {{ FPM_POOL_TCP }}
              PHP Version           : {{ PHP_VERSION }}

              =========================================================
                                  Redis Settings
              =========================================================
              Redis Password        : {{ REDIS_PASS }}
              =========================================================
            dest: "~/setup-server-info.txt"
            mode: '0644'